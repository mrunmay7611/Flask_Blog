-- phpMyAdmin SQL Dump
-- version 4.8.4
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Jul 15, 2024 at 03:46 PM
-- Server version: 10.1.37-MariaDB
-- PHP Version: 7.1.25

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `codingthunder`
--

-- --------------------------------------------------------

--
-- Table structure for table `contacts`
--

CREATE TABLE `contacts` (
  `sno` int(11) NOT NULL,
  `name` text NOT NULL,
  `phone_num` varchar(50) NOT NULL,
  `msg` text NOT NULL,
  `date` datetime DEFAULT CURRENT_TIMESTAMP,
  `email` varchar(50) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `contacts`
--

INSERT INTO `contacts` (`sno`, `name`, `phone_num`, `msg`, `date`, `email`) VALUES
(1, 'first post', '123456789', 'first post', '2018-07-29 11:36:23', 'firstpost@gmail.com'),
(17, 'mrunmay kurkute', '9887456321', 'This is the test message after all changes and confirmation.', '2024-07-15 19:10:39', 'Test@gmail.com');

-- --------------------------------------------------------

--
-- Table structure for table `posts`
--

CREATE TABLE `posts` (
  `sno` int(11) NOT NULL,
  `title` text NOT NULL,
  `tagline` text NOT NULL,
  `slug` varchar(25) NOT NULL,
  `content` text NOT NULL,
  `img_file` varchar(12) NOT NULL,
  `date` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `posts`
--

INSERT INTO `posts` (`sno`, `title`, `tagline`, `slug`, `content`, `img_file`, `date`) VALUES
(1, 'The Evolution of Python: From Guido\'s Side Project to Dominating the Data Science World', 'From Guido\'s Vision to Data Science Dominance', 'python', 'Python, a versatile and powerful programming language, has evolved significantly since its inception in the late 1980s. What started as a side project for Guido van Rossum has now become one of the most popular languages in the world, particularly in fields like data science, web development, and automation. Let\'s take a journey through the evolution of Python, exploring its origins, key milestones, and its impact on the programming landscape.\r\n\r\nOrigins and Early Development\r\nPython\'s story begins in the late 1980s when Guido van Rossum, a Dutch programmer, started working on a new language inspired by ABC and influenced by his desire for a more concise and readable syntax. Guido released the first version of Python (version 0.9.0) in February 1991, with features like exception handling, functions, and the core data types we still use today.\r\n\r\nPython 2 vs. Python 3: The Transition\r\nPython 2, released in 2000, quickly gained popularity and became the standard for many years. However, as the language evolved, certain design flaws and limitations became apparent. This led to the development of Python 3, which was released in 2008. Python 3 aimed to fix inconsistencies and improve the language\'s design while maintaining backward compatibility.\r\n\r\n\r\nThe transition from Python 2 to Python 3 was not without challenges. Python 2 had a large existing codebase, and many developers were reluctant to migrate due to concerns about breaking compatibility with older systems. However, the Python community actively encouraged migration, and major libraries and frameworks eventually dropped support for Python 2, pushing adoption of Python 3 forward.\r\n\r\nPython\'s Rise in Popularity\r\nThroughout the 2000s and 2010s, Python\'s popularity grew steadily. Several factors contributed to this rise:\r\n\r\nEase of Learning and Readability: Python\'s syntax is clean and easy to read, making it accessible for beginners and appealing to experienced developers.\r\n\r\n\r\nVersatility: Python\'s versatility allows it to be used in a wide range of applications, from web development (Django, Flask) to data analysis and machine learning (NumPy, Pandas, TensorFlow).\r\n\r\n\r\nStrong Community and Ecosystem: Python benefits from a vibrant community that contributes to its ecosystem with libraries, frameworks, and tools. The Python Package Index (PyPI) hosts thousands of third-party packages, facilitating rapid development.\r\n\r\n\r\nPython in Data Science and Machine Learning\r\nOne of the most significant drivers of Python\'s recent popularity has been its dominance in the fields of data science and machine learning. Libraries such as NumPy, SciPy, Pandas, and scikit-learn provide robust tools for data manipulation, analysis, and modeling. TensorFlow and PyTorch have cemented Python\'s role in deep learning and AI research.\r\n\r\nPython\'s Future Directions\r\nLooking ahead, Python continues to evolve. The Python Software Foundation (PSF) releases regular updates and improvements, addressing performance optimizations, security enhancements, and language features. Python\'s versatility and strong community support ensure its relevance across diverse domains, from web development to scientific computing and beyond.\r\n\r\n\r\nIn conclusion, Python\'s journey from Guido van Rossum\'s pet project to a global powerhouse reflects its robust design, community-driven development, and adaptability to emerging technologies. Whether you\'re a beginner exploring programming or a seasoned developer tackling complex AI algorithms, Python remains a language of choice, embodying the spirit of innovation and collaboration that defines modern programming languages.\r\n\r\nAs Python continues to shape the future of technology, its evolution stands as a testament to the enduring impact of thoughtful design, community engagement, and a commitment to making programming accessible and powerful for everyone.', 'python.jpg', '2024-07-15 18:10:16'),
(2, 'Future Trends in Artificial Intelligence: Shaping Tomorrow\'s Technology Landscape', 'Emerging Trends and Innovations', 'AI', 'Artificial Intelligence (AI) is not just a buzzword but a transformative force reshaping industries and societies worldwide. As we look ahead, the future of AI promises unprecedented advancements and opportunities across various sectors. Let\'s explore some of the emerging trends that are set to define the AI landscape in the coming years.\r\n\r\n1. AI in Healthcare: Personalized Medicine and Diagnostics\r\nAI is poised to revolutionize healthcare by enabling personalized treatment plans based on individual genetic profiles, medical history, and real-time data analysis. Machine learning algorithms can assist in early disease detection, drug discovery, and optimizing treatment outcomes. Expect AI-powered diagnostic tools and virtual health assistants to become more prevalent, enhancing patient care and operational efficiency in healthcare facilities.\r\n\r\n2. Ethical AI and Responsible Innovation\r\nAs AI systems become more sophisticated and pervasive, there\'s a growing emphasis on ethical considerations and responsible AI development. From bias mitigation in algorithms to ensuring transparency and accountability in AI decision-making processes, ethical AI practices will play a crucial role in fostering trust and acceptance among users and stakeholders.\r\n\r\n3. AI-Driven Automation in Industry and Manufacturing\r\nIndustries are increasingly adopting AI-driven automation to streamline operations, improve productivity, and reduce costs. Robotics and autonomous systems powered by AI are transforming manufacturing processes, logistics, and supply chain management. Expect to see further integration of AI technologies like computer vision and predictive maintenance to enhance efficiency and optimize resource utilization in industrial settings.\r\n\r\n4. Natural Language Processing (NLP) and Conversational AI\r\nAdvancements in NLP and conversational AI are revolutionizing how humans interact with technology. Virtual assistants and chatbots powered by AI are becoming more intuitive and capable of understanding context, emotions, and natural language nuances. In the future, expect to see more sophisticated applications of NLP in customer service, education, content creation, and beyond, enhancing user experience and productivity.\r\n\r\n5. AI in Autonomous Vehicles and Smart Transportation\r\nThe development of autonomous vehicles represents a significant frontier for AI. AI algorithms enable vehicles to perceive their surroundings, make real-time decisions, and navigate safely. Beyond autonomous cars, AI-driven smart transportation systems promise to revolutionize urban mobility, traffic management, and logistics, ushering in a new era of sustainable and efficient transportation solutions.\r\n\r\n6. AI in Finance and Fintech Innovations\r\nAI is reshaping the financial industry with applications ranging from fraud detection and risk management to algorithmic trading and personalized financial advice. Machine learning models analyze vast amounts of data to detect patterns and anomalies, improving decision-making processes and customer satisfaction. Expect AI-powered fintech innovations to continue driving digital transformation and financial inclusion globally.\r\n\r\n7. Edge AI and IoT Integration\r\nEdge AI, where AI algorithms run locally on devices, is gaining traction as it enables faster processing, reduced latency, and improved data privacy. Combined with the Internet of Things (IoT), Edge AI facilitates intelligent decision-making at the device level, enhancing smart home automation, industrial IoT applications, and environmental monitoring. Look for further advancements in Edge AI capabilities and seamless integration with IoT ecosystems.\r\n\r\nConclusion\r\nThe future of AI is brimming with possibilities, from enhancing healthcare outcomes and transforming industries to revolutionizing everyday interactions and driving sustainable development. As AI technologies continue to evolve, stakeholders must prioritize ethical considerations, collaboration, and responsible innovation to harness AI\'s full potential for the benefit of society. Embracing these trends will pave the way for a future where AI enhances human capabilities, fosters innovation, and shapes a more connected and intelligent world.\r\n\r\nIn summary, the future of AI is not just about technological advancement but also about how we responsibly integrate these innovations into our lives, businesses, and communities, ensuring a future that is inclusive, ethical, and beneficial for all.', 'AI.jpg', '2024-07-15 18:15:25'),
(4, 'Exploring the Dark Web: Myths vs. Reality', 'Unveiling the Truth Behind the Dark Web: Myths Debunked, Realities Explored.', 'darkweb', 'The term \"Dark Web\" often conjures up images of a hidden, mysterious part of the internet where illegal activities thrive and anonymity reigns supreme. It\'s a topic that fascinates and frightens in equal measure, fueled by media portrayals and hearsay. But what is the Dark Web really like? Let\'s unravel the myths and confront the reality of this often misunderstood corner of cyberspace.\r\n\r\nMyth #1: The Dark Web is solely a hub for criminal activity.\r\n\r\nReality: While it\'s true that illicit activities can and do occur on the Dark Web due to its anonymity features, not everything on the Dark Web is illegal. In fact, the Dark Web also hosts legitimate uses such as private forums, whistleblowing platforms, and areas for users to communicate away from the surveillance of the surface web.\r\n\r\nMyth #2: You can only access the Dark Web with special software.\r\n\r\nReality: Accessing the Dark Web does require specific software like Tor (The Onion Router), which anonymizes your internet traffic by encrypting it and routing it through multiple nodes. However, it\'s not as difficult as it may seem to get started. Tor, for example, is freely available and relatively easy to install.\r\n\r\nMyth #3: Everyone on the Dark Web is anonymous and untraceable.\r\n\r\nReality: While the Dark Web provides a layer of anonymity, it\'s not foolproof. Law enforcement agencies have developed techniques to track illegal activities, and mistakes by users can compromise their anonymity. Moreover, scams and fraud are prevalent, making it a risky place for inexperienced users.\r\n\r\nMyth #4: You can buy anything on the Dark Web.\r\n\r\nReality: Yes, you can find a variety of goods and services for sale, some of which are illegal. These include drugs, counterfeit money, stolen credentials, and more. However, buying such items comes with significant legal and personal risks. Most users steer clear of these markets due to their shady nature.\r\n\r\nMyth #5: Exploring the Dark Web is always dangerous.\r\n\r\nReality: While there are risks associated with exploring the Dark Web, exercising caution can mitigate many of them. Stick to reputable sources for information and avoid engaging in any illegal activities. Understanding the environment and being aware of potential dangers can help navigate the Dark Web safely.\r\n\r\nConclusion\r\n\r\nThe Dark Web is a complex and multifaceted part of the internet that goes beyond its sensationalized portrayal in media. While it\'s true that illegal activities occur there, it also serves legitimate purposes for privacy and freedom of expression. Exploring the Dark Web requires a balanced approach: understanding its risks and realities while separating fact from fiction. As with any exploration, knowledge and caution are key to staying safe and informed.', 'darkweb.jpg', '2024-07-15 18:45:43'),
(5, 'The Rise of Cryptocurrency: Revolutionizing Finance and Beyond', 'Transforming Finance and Redefining Possibilities', 'Cryptocurrency', 'In the ever-evolving landscape of digital technology, few innovations have captured the world\'s imagination and investment like cryptocurrency. Emerging in the aftermath of the global financial crisis of 2008, cryptocurrencies promised a decentralized, secure, and transparent alternative to traditional banking systems. Over the years, they have not only gained traction as a financial asset but also sparked debates, regulatory scrutiny, and technological advancements. In this blog, we delve into the fascinating world of cryptocurrency, exploring its origins, impact, challenges, and potential future.\r\n\r\nOrigins and Technology\r\n\r\nCryptocurrency, often referred to as digital or virtual currency, operates on a technology known as blockchain. This decentralized ledger system records all transactions across a network of computers, ensuring transparency and security through cryptographic techniques. The pioneer cryptocurrency, Bitcoin, was introduced in 2009 by an anonymous entity known as Satoshi Nakamoto. Bitcoin\'s revolutionary concept of using blockchain to create a peer-to-peer electronic cash system laid the foundation for a plethora of other cryptocurrencies that followed, each with its own unique features and purposes.\r\n\r\nBeyond Bitcoin: The Diversity of Cryptocurrencies\r\n\r\nWhile Bitcoin remains the most well-known cryptocurrency, the ecosystem has grown exponentially, with thousands of alternative coins (altcoins) catering to diverse needs and niches. Ethereum, launched in 2015, introduced smart contracts—self-executing contracts with the terms of the agreement directly written into code—opening up possibilities beyond simple monetary transactions. Other cryptocurrencies like Ripple (XRP), Litecoin (LTC), and Cardano (ADA) each offer unique features, from faster transaction times to enhanced privacy measures, contributing to the vibrant and competitive crypto market.\r\n\r\nCryptocurrency and Financial Inclusion\r\n\r\nOne of the most significant promises of cryptocurrency is its potential to democratize finance and promote financial inclusion. Traditional banking systems often exclude individuals in underbanked or unbanked regions due to infrastructure limitations or regulatory hurdles. Cryptocurrencies, accessible via internet-enabled devices, offer an alternative means of transferring value and accessing financial services without intermediaries. This accessibility has the potential to empower millions of individuals worldwide, providing them with greater control over their finances and economic opportunities.\r\n\r\nChallenges and Regulatory Landscape\r\n\r\nDespite its promise, the rapid growth of cryptocurrency has brought forth challenges and regulatory scrutiny. Concerns about price volatility, security breaches, money laundering, and fraudulent activities have prompted governments and regulatory bodies to establish frameworks to monitor and regulate cryptocurrency transactions. While some countries embrace cryptocurrencies as innovative financial assets, others have imposed restrictions or outright bans to mitigate risks and maintain financial stability.\r\n\r\nThe Future of Cryptocurrency\r\n\r\nLooking ahead, the future of cryptocurrency appears poised for continued evolution and integration into mainstream finance and technology. Major financial institutions and corporations are increasingly adopting blockchain technology to streamline operations, enhance transparency, and explore new business models. Central banks are also exploring the concept of central bank digital currencies (CBDCs), digital forms of fiat currencies issued and regulated by governments, which could further bridge the gap between traditional finance and the digital economy.\r\n\r\nConclusion\r\n\r\nCryptocurrency represents a paradigm shift in how we perceive and interact with money, offering unprecedented opportunities for innovation, financial inclusion, and economic empowerment. As the ecosystem matures and regulatory frameworks evolve, cryptocurrencies are likely to play an increasingly integral role in shaping the future of finance and technology. Whether as a speculative investment, a medium of exchange, or a technological breakthrough, the journey of cryptocurrency continues to unfold, with potential implications that extend far beyond the confines of traditional finance.\r\n\r\nIn this blog, we have scratched the surface of this vast and dynamic field. As developments unfold and innovations emerge, the story of cryptocurrency promises to be one of ongoing transformation and adaptation in our increasingly digital world.', 'Crypto.jpg', '2024-07-15 18:50:44'),
(7, 'Building Scalable Applications with Microservices Architecture', 'Embracing Microservices Architecture', 'App', 'In the dynamic world of software development, building applications that can scale effectively and handle increasing loads is crucial. One architectural approach that has gained significant popularity for achieving scalability and flexibility is microservices architecture. In this blog, we will explore what microservices architecture is, its benefits and challenges, key principles to follow, and practical steps for implementing it in your projects.\r\n\r\nUnderstanding Microservices Architecture\r\n\r\nMicroservices architecture is an architectural style that structures an application as a collection of loosely coupled services. Each service is self-contained and implements a specific business capability. These services communicate with each other through lightweight protocols such as HTTP or messaging queues. Unlike monolithic architectures where the entire application is built as a single unit, microservices break down the application into smaller, independent services that can be developed, deployed, and scaled independently.\r\n\r\nBenefits of Microservices Architecture\r\n\r\nScalability: Each microservice can be scaled independently based on its specific resource demands, allowing applications to handle varying workloads more efficiently.\r\n\r\nFlexibility and Agility: Teams can develop, deploy, and update services independently, enabling faster release cycles and the ability to adopt new technologies or frameworks without impacting the entire application.\r\n\r\nFault Isolation: Since services are isolated, failures in one service do not necessarily affect the entire application, enhancing fault tolerance and resilience.\r\n\r\nImproved Maintainability: Smaller codebases and well-defined boundaries between services make it easier to understand, maintain, and debug the application.\r\n\r\nTechnology Diversity: Each microservice can be implemented using different technologies or programming languages, allowing teams to choose the best tool for each job.\r\n\r\nChallenges of Microservices Architecture\r\n\r\nWhile microservices offer numerous benefits, they also introduce challenges that need to be carefully managed:\r\n\r\nComplexity: Managing a distributed system of microservices introduces complexity in terms of deployment, monitoring, and orchestration.\r\n\r\nData Management: Ensuring data consistency and managing data across multiple services can be challenging, especially in transactional scenarios.\r\n\r\nOperational Overhead: Each microservice requires infrastructure and operational support, which can increase overhead compared to monolithic applications.\r\n\r\nService Communication: Efficient and reliable communication between services is crucial but can be complex to implement and maintain.\r\n\r\nKey Principles of Microservices Architecture\r\n\r\nTo effectively leverage microservices architecture, developers should adhere to the following principles:\r\n\r\nSingle Responsibility Principle: Each microservice should have a clear and distinct responsibility or business capability.\r\n\r\nDecentralized Data Management: Prefer decentralized data management patterns such as database per service or event-driven architectures to avoid tight coupling between services.\r\n\r\nResilience and Fault Tolerance: Design services with built-in mechanisms for handling failures gracefully, such as retry policies and circuit breakers.\r\n\r\nAutomated Deployment and DevOps Practices: Implement automated deployment pipelines and embrace DevOps practices to streamline the deployment and operation of microservices.\r\n\r\nPractical Steps for Implementing Microservices\r\n\r\nIdentify Service Boundaries: Analyze your application domain and identify cohesive business capabilities that can be encapsulated into individual microservices.\r\n\r\nDefine Contracts: Clearly define communication protocols and APIs (Application Programming Interfaces) between microservices to ensure interoperability and maintainability.\r\n\r\nChoose Suitable Technologies: Select technologies and frameworks that align with the requirements and constraints of each microservice while ensuring compatibility and ease of integration.\r\n\r\nImplement Monitoring and Observability: Establish robust monitoring and logging practices to gain insights into the health, performance, and behavior of your microservices.\r\n\r\nContinuous Testing and Integration: Implement continuous testing and integration practices to detect issues early and ensure the overall system remains stable and reliable.\r\n\r\nConclusion\r\n\r\nMicroservices architecture offers a compelling approach for building scalable, flexible, and maintainable applications in today\'s fast-paced software development landscape. By embracing the principles of microservices and implementing best practices, organizations can unlock the potential for agility, resilience, and innovation in their software projects. While adopting microservices comes with challenges, the benefits in terms of scalability, flexibility, and developer productivity make it a worthwhile investment for modern application development.\r\n\r\nIncorporate microservices architecture thoughtfully into your projects, aligning it with your organizational goals and technical requirements, to harness its full potential and drive your applications towards success in the digital era.', 'app.jpg', '2024-07-15 18:58:11'),
(8, 'Advanced Techniques in JavaScript: ES6 and Beyond', 'Advanced Techniques in ES6 and Beyond', 'JS', 'JavaScript, once primarily known for enhancing web pages with interactivity, has evolved into a powerful and versatile language capable of powering entire applications. With the release of ECMAScript 6 (ES6) and subsequent versions, JavaScript has introduced numerous features and syntax improvements that streamline development, enhance readability, and unlock advanced programming techniques. In this blog, we\'ll explore some of the most impactful features introduced in ES6 and beyond, delve into advanced techniques for leveraging them effectively, and discuss how they can elevate your JavaScript development skills.\r\n\r\nEvolution of JavaScript: From ES5 to ES6\r\n\r\nJavaScript\'s evolution from ES5 to ES6 marked a significant milestone in the language\'s history, introducing modern syntax and features that aligned with developer expectations and needs. Key enhancements included:\r\n\r\nlet and const Declarations: Enhanced variable declarations that provide block-scoping and immutability with const.\r\n\r\nArrow Functions: Concise syntax for defining functions, with implicit return and lexical scoping of this.\r\n\r\nTemplate Literals: String interpolation with embedded expressions, improving readability and flexibility.\r\n\r\nEnhanced Object Literals: Simplified syntax for defining object properties and methods.\r\n\r\nDestructuring Assignment: Extracting values from arrays or objects into distinct variables, enhancing code clarity.\r\n\r\nClasses and Inheritance: Syntactic sugar for prototypal inheritance, aligning JavaScript with traditional object-oriented languages.\r\n\r\nPromises: Built-in support for asynchronous operations, facilitating cleaner and more manageable asynchronous code.\r\n\r\nAdvanced Techniques in ES6 and Beyond\r\n\r\nModule Bundlers and ES6 Modules: Utilizing tools like Webpack or Rollup to manage module dependencies and bundle JavaScript files, enabling efficient code organization and deployment.\r\n\r\nAsynchronous Programming with async/await: Leveraging async functions and the await keyword to simplify asynchronous code, improving readability and error handling.\r\n\r\nFunctional Programming Paradigm: Exploring higher-order functions, immutability, and pure functions to write concise and maintainable code.\r\n\r\nIterators and Generators: Creating iterable objects and generator functions to control iteration and manage asynchronous flows.\r\n\r\nMeta Programming with Symbols and Proxies: Harnessing Symbols and Proxies to manipulate object behavior, enabling advanced meta programming techniques.\r\n\r\nError Handling Strategies: Implementing robust error handling practices, including try-catch blocks and custom error classes, to manage exceptions effectively.\r\n\r\nBenefits and Applications\r\n\r\nMastering advanced JavaScript techniques allows developers to:\r\n\r\nEnhance Code Efficiency: Write cleaner, more concise code that is easier to maintain and debug.\r\nImprove Performance: Leverage modern JavaScript features to optimize application performance and responsiveness.\r\nEmbrace Modern Development Practices: Adopt industry-standard practices and patterns that align with modern web development workflows.\r\nFacilitate Collaboration: Utilize modular and reusable components that promote teamwork and code sharing across projects.\r\nConclusion\r\n\r\nAs JavaScript continues to evolve with each new ECMAScript release, developers have access to a growing arsenal of tools and techniques that empower them to build sophisticated and scalable applications. By embracing ES6 and beyond, developers can leverage advanced features and best practices to streamline development workflows, improve code quality, and stay at the forefront of JavaScript innovation. Whether you\'re diving deeper into asynchronous programming with async/await, mastering functional programming concepts, or exploring the power of ES6 modules, advancing your JavaScript skills opens up new possibilities for creativity and efficiency in web development.\r\n\r\nStay tuned as we explore these advanced techniques and more in our journey through modern JavaScript development. Empower your coding journey with ES6 and beyond, and unlock the full potential of JavaScript in building robust and innovative web applications.', 'JS.jpg', '2024-07-15 19:02:24');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `contacts`
--
ALTER TABLE `contacts`
  ADD PRIMARY KEY (`sno`);

--
-- Indexes for table `posts`
--
ALTER TABLE `posts`
  ADD PRIMARY KEY (`sno`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `contacts`
--
ALTER TABLE `contacts`
  MODIFY `sno` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=18;

--
-- AUTO_INCREMENT for table `posts`
--
ALTER TABLE `posts`
  MODIFY `sno` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=9;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
